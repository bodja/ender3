[respond]

[gcode_macro START_PRINT]
description: Homing, warming, priming before start
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
  {% if params.TOTAL_LAYER %}
    SET_PRINT_STATS_INFO TOTAL_LAYER={params.TOTAL_LAYER}
  {% endif %}
  G28  ; Home all axis
  G90  ; use absolute coordinates
  M83  ; extruder relative mode
  M140 S{BED_TEMP}  ; start bed heating
  M190 S{BED_TEMP} ; wait for bed temp to stabilize
  G4 P90000  ; 1.5 minutes to stabilize temp and warmup enclosure
  BED_MESH_CALIBRATE ADAPTIVE=1
  _PARK_PRE_PRINT
  M104 S{EXTRUDER_TEMP}  ; set final nozzle temp
  M109 S{EXTRUDER_TEMP}  ; wait for nozzle temp to stabilize

[gcode_macro END_PRINT]
description: Turn off heaters, fans, motors, present print
gcode:
    G92 E0  ; reset extruder position
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-1 F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    TURN_OFF_HEATERS
    _PARK_POST_PRINT
    M84  ; motors off
    M107  ; fans off

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  END_PRINT
  CANCEL_PRINT_BASE

[gcode_macro M600]
description: Change filament
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro _PARK_PRE_PRINT]
description: Move the toolhead to the edge of the print
gcode:
  {% set travel_speed = (printer.toolhead.max_velocity * 20) | float %}
  {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
  {% set z_park = 15 %}
  {% if z_park < printer.toolhead.position.z %}
    {% set z_park = printer.toolhead.position.z %}
  {% else %}
  {% endif %}
  {% set x_park = all_points | map(attribute=0) | min | default(5) %}
  {% set y_park = all_points | map(attribute=1) | min | default(5) %}
  G90  # absolute
  G0 Z{z_park}
  G0 X{x_park} Y{y_park} F{travel_speed}

[gcode_macro _PARK_POST_PRINT]
description: Safely move toolhead away from the print and present the print
gcode:
  {% set z_distance=50 %}
  {% set travel_speed=(printer.toolhead.max_velocity * 20) | float %}
  ; move Z
  G91  ; set relative to current position
  G0 Z{[z_distance, printer.toolhead.axis_maximum.z - printer.toolhead.position.z] | min}
  ; move X-Y (present the print)
  G90 ; set absolute
  G0 X5 Y{printer.toolhead.axis_maximum.y * 0.85} F{travel_speed}
  M400  ; wait for all moves to complete

[gcode_macro PROBE_SCREWS]
description: Probe bed screws
gcode:
  {% set travel_speed = (printer.toolhead.max_velocity * 20) | float %}
  {% set msg_prefix = "Probing:" %}

  {% set bltouch_x_offset = printer.configfile.config.bltouch.x_offset | float | abs %}
  {% set bltouch_y_offset = printer.configfile.config.bltouch.y_offset | float | abs %}

  {% set probe = namespace(points=dict(home=printer.configfile.config.safe_z_home.home_xy_position, **printer.configfile.config.bed_screws)) %}
  {% if params.N %}
    {% if params.N|int %}
      {% set probe.single_key='screw%s'|format(params.N) %}
    {% else %}
      {% set probe.single_key=params.N %}
    {% endif %}
    {% set probe.points = dict(**{probe.single_key: probe.points[probe.single_key]}) %}
  {% endif %}

  {% if "xyz" in printer.toolhead.homed_axes %}
    {% for key, value in probe.points|dictsort %}
      RESPOND PREFIX="{msg_prefix}" MSG="{key}"

      {% set screw_x, screw_y = value.split(',') | map('float') %}
      {% set bltouch_x = screw_x + bltouch_x_offset %}
      {% set bltouch_y = screw_y + bltouch_y_offset %}

      G90 ; absolute
      G0 X{bltouch_x} Y{bltouch_y} F{travel_speed}
      PROBE
      G0 Z5 ; lift-z 5mm
      M400  ; wait for all moves to complete to prevent Probing message appearing too early
    {% endfor %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

[gcode_macro GET]
gcode:
  {% set msg = namespace(text='') %}
  {% set target = namespace(source=printer) %}

  {% if params.KEY %}
    {% for attr in params.KEY.split('.') %}
      {% set target.source = target.source[attr] %}
    {% endfor %}
    {% set msg.text = target.source|string %}
  {% else %}
    {% for key in target.source|sort %}
      {% set msg.text = '%s\n%s=%s'|format(msg.text, key, target.source[key]) %}
    {% endfor %}
  {% endif %}

  {action_respond_info(msg.text)}
