[respond]

[gcode_macro START_PRINT]
description: Homing, warming, priming before start
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
  G90  ; use absolute coordinates
  M83  ; extruder relative mode
  M140 S{BED_TEMP}  # start bed heating
  G4 S30  ; allow partial nozzle warmup
  G28  ; Home all axis
  M190 S{BED_TEMP} ; wait for bed temp to stabilize
  G4 P60000  ; 1 minute warmup enclosure
  BED_MESH_CALIBRATE ADAPTIVE=1
  _PARK_PRE_PRINT
  M104 S{EXTRUDER_TEMP} ; set final nozzle temp
  M109 S{EXTRUDER_TEMP} ; wait for nozzle temp to stabilize

[gcode_macro END_PRINT]
description: Turn off heaters, fans, motors, present print
gcode:
    TURN_OFF_HEATERS
    G92 E0  ; reset extruder position
    _PARK_POST_PRINT
    M84  ; motors off
    M107  ; fans off

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  END_PRINT
  CANCEL_PRINT_BASE

[gcode_macro GET]
gcode:
  {% set result = namespace(source=printer) %}
  {% for attr in params.VALUE.split('.') %}
    {% set result.source = result.source[attr] %}
  {% endfor %}
  {action_respond_info('%s=%s'|format(params.VALUE, result.source))}

[gcode_macro _PARK_PRE_PRINT]
description: Move the toolhead to the edge of the print
gcode:
  {% set travel_speed = (printer.toolhead.max_velocity * 20) | float %}
  {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
  {% set z_park = 15 %}
  {% if z_park < printer.toolhead.position.z %}
    {% set z_park = printer.toolhead.position.z %}
  {% else %}
  {% endif %}
  {% set x_park = all_points | map(attribute=0) | min %}
  {% set y_park = all_points | map(attribute=1) | min %}

  SAVE_GCODE_STATE NAME=state_before_park

  G90  # absolute
  G0 Z{z_park}
  G0 X{x_park} Y{y_park} F{travel_speed}

  RESTORE_GCODE_STATE NAME=state_before_park

[gcode_macro _PARK_POST_PRINT]
description: Safely move toolhead away from the print and present the print
gcode:
  {% set z_distance=50 %}
  {% set travel_speed=(printer.toolhead.max_velocity * 20) | float %}
  ; move Z
  G91  ; set relative to current position
  G0 Z{[z_distance, printer.toolhead.axis_maximum.z - printer.toolhead.position.z] | min}
  ; move X-Y (present the print)
  G90 ; set absolute
  G0 X5 Y{printer.toolhead.axis_maximum.y * 0.85} F{travel_speed}
  M400  ; wait for all moves to complete
